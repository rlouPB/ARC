public with sharing class PrintedEGOMedicalRecord extends PrintedMedicalRecordBase {
	public override String getSObjectName() {
		return 'EGO__c';
	}
	//Schema.SObjectType t = Schema.getGlobalDescribe().get('Contact');
	public PrintedEGOMedicalRecord() {
		super();
	}
	public override String getSDocJunctionLookupField() {
		return 'EGO__c';
	}

	public override Map<String, List<TreeGridNode>> collectAvailableMedicalRecords() {
		Map<String, List<TreeGridNode>> treeGridMap = new Map<String, List<TreeGridNode>>();
		List<EGO__c> egos = [SELECT Id, Name, Admission__c, Completed_By__c, Current_Treatment_Plan__c, Date__c, Draft_Treatment_Plan__c, Finalized_By__c, Finalized_Date_Time__c, Status__c, Finalized_By_User__c, Finalized_By_Professional_Name__c, SDoc_Junction__c, Admission__r.Patient_Account__r.Name FROM EGO__c WHERE Admission__r.Patient_Account__c = :patientId AND Date__c != NULL AND Admission__c IN :admissionIdList AND Status__c = 'Finalized' WITH SECURITY_ENFORCED ORDER BY Date__c DESC];
		for (EGO__c ego : egos) {
			if (!treeGridMap.containsKey('Evaluation_Goals_Objectives_EGO')) {
				treeGridMap.put('Evaluation_Goals_Objectives_EGO', new List<TreeGridNode>());
			}
			TreeGridNode tg = new TreeGridNode();
			tg.sfID = ego.Id;
			//tg.contactDate = form.Master_date__c;
			Integer d = ego.Date__c.day();
			Integer mo = ego.Date__c.month();
			Integer yr = ego.Date__c.year();
			tg.contactDate = DateTime.newInstance(yr, mo, d);
			tg.url = '/' + ego.Id;
			tg.name = formatLevel3Name(ego);
			system.debug('ego name =' + tg.name);
			tg.nodeName = ego.Name;
			tg.developerName = 'Evaluation_Goals_Objectives_EGO';
			tg.finalizedDatetime = ego.Finalized_Date_Time__c;
			tg.finalizedBy = ego.Finalized_By_Professional_Name__c;
			List<TreeGridNode> egoItems = treeGridMap.get('Evaluation_Goals_Objectives_EGO');
			egoItems.add(tg);
		}
		system.debug('---->' + treeGridMap.get('Evaluation_Goals_Objectives_EGO'));
		availableMedicalRecords = treeGridMap;
		return treeGridMap;
	}
	public override List<String> collectSelectedMedicalRecords() {
		system.debug('collectSelectedMedicalRecords');
		List<Printed_Medical_Included_Record__c> includedObjects = [SELECT SDoc_Junction__r.EGO__r.Id, SDoc_Junction__r.EGO__r.Name, SDoc_Junction__r.EGO__r.Finalized_Date_Time__c, SDoc_Junction__r.EGO__r.Date__c, SDoc_Junction__r.EGO__r.Finalized_By_User__r.Professional_Name__c, Sort_Order__c FROM Printed_Medical_Included_Record__c WHERE Printed_Medical_Record_Request__c = :requestId AND SDoc_Junction__r.EGO__c != NULL AND SDoc_Junction__r.EGO__r.Status__c = 'Finalized' WITH SECURITY_ENFORCED ORDER BY SDoc_Junction__r.EGO__r.Finalized_Date_Time__c DESC];
		system.debug('collectSelectedMedicalRecords =' + includedObjects);
		List<String> selectedRows = new List<String>();
		for (Printed_Medical_Included_Record__c r : includedObjects) {
			EGO__c note = r.SDoc_Junction__r.EGO__r;
			String itemName = formatLevel3Name(note);
			selectedRows.add(itemName);
			system.debug('itemname =' + itemName);
		}
		selectedMedicalRecords = selectedRows;
		return selectedRows;
	}

	public override List<String> collectSelectedMedicalRecordsInDateRange() {
		List<String> selectedRows = new List<String>();
		String egosQueryFormat = 'SELECT {0} FROM EGO__c WHERE Admission__r.Patient_Account__c = :patientId AND Status__c = \'Finalized\' AND Admission__c in :admissionIdList AND {1} >= :dateFrom AND {1} <= :dateTo ORDER by {1}';
		String egosQueryFields = 'Id , Name , Admission__c , Completed_By__c , Current_Treatment_Plan__c , ' + 'Date__c , Draft_Treatment_Plan__c , Finalized_By__c , Finalized_Date_Time__c , ' + 'Status__c , Finalized_By_User__c , Finalized_By_Professional_Name__c , ' + 'SDoc_Junction__c, Admission__r.Patient_Account__r.Name';
		String egosQueryDateField = searchFinalizedDate ? 'Finalized_Date_Time__c' : 'Date__c';
		String egosQuery = String.format(egosQueryFormat, new List<String>{ egosQueryFields, egosQueryDateField });
		system.debug('query =' + egosQuery);
		List<EGO__c> egos = Database.query(egosQuery);
		system.debug('egos =' + egos);

		for (EGO__c ego : egos) {
			selectedRows.add(formatLevel3Name(ego));
		}
		selectedMedicalRecordsInDateRange = selectedRows;
		return selectedRows;
	}
	public override List<TreeGridNode> findMedicalRecordsForDocumentType(String docName) {
		List<TreeGridNode> items = new List<TreeGridNode>();
		if (docName == 'Evaluation_Goals_Objectives_EGO') {
			List<EGO__c> egoList = [SELECT Id, Name, Finalized_Date_Time__c, Date__c, Finalized_By_User__r.Name, Finalized_By_User__r.Professional_Name__c, Finalized_By_Professional_Name__c FROM EGO__c WHERE Admission__r.Patient_Account__c = :patientId AND Status__c = 'Finalized' WITH SECURITY_ENFORCED];
			system.debug('-------------retrieveRecordsToPrint-------noteList-----' + egoList);
			for (EGO__c ego : egoList) {
				TreeGridNode tg = new TreeGridNode();
				tg.sfID = ego.Id;
				tg.url = '/' + ego.Id;
				Integer d = ego.Date__c.day();
				Integer mo = ego.Date__c.month();
				Integer yr = ego.Date__c.year();
				tg.contactDate = DateTime.newInstance(yr, mo, d);
				tg.name = formatLevel3Name(ego);
				tg.nodeName = ego.Name;
				tg.finalizedDatetime = ego.Finalized_Date_Time__c;
				tg.finalizedBy = ego.Finalized_By_Professional_Name__c;
				tg.children = null;
				tg.childrenCount = 0;
				items.add(tg);
			}
		}

		return items;
	}
	public override List<TreeGridNode.PrintedIncludedObject> getMedicalRecordAsHTMLs() {
		List<TreeGridNode.PrintedIncludedObject> includedObjects = new List<TreeGridNode.PrintedIncludedObject>();
		for (Printed_Medical_Included_Record__c pmir : [SELECT SDoc_Junction__r.EGO__r.Snapshot__r.Html__c, SDoc_Junction__r.EGO__r.Date__c, Sort_Order__c, SDoc_Junction__r.EGO__r.Finalized_Date_Time__c, SDoc_Junction__r.EGO__r.Name FROM Printed_Medical_Included_Record__c WHERE Printed_Medical_Record_Request__c = :requestId AND SDoc_Junction__r.EGO__c != NULL AND SDoc_Junction__r.EGO__r.Status__c = 'Finalized' WITH SECURITY_ENFORCED ORDER BY Sort_Order__c]) {
			Integer sortSequence = SDocsYourekaUtils.calculateSortingSequence('Evaluation, Goals, Objectives (EGO)');
			TreeGridNode.PrintedIncludedObject includedObject = new TreeGridNode.PrintedIncludedObject('Evaluation, Goals, Objectives (EGO)', pmir.SDoc_Junction__r.EGO__r.Snapshot__r.Html__c, sortSequence);
			includedObject.finalizedTime = pmir.SDoc_Junction__r.EGO__r.Finalized_Date_Time__c;
			includedObject.sfdcName = pmir.SDoc_Junction__r.EGO__r.Name;
			includedObjects.add(includedObject);
		}

		return includedObjects;
	}
	public override String formatLevel2Name(TreeGridNode level2) {
		return level2.developerName + ';' + level2.sObjectName + ';' + patientId;
	}
	public override String formatLevel3Name(SObject sObj) {
		EGO__c ego = (EGO__c) sObj;
		return ego.Name + ';Evaluation_Goals_Objectives_EGO;' + ego.Id + ';EGO__c';
	}

	// TODO: controllerName: Increase code coverage
	public static void increaseCoverage() {
		Integer i = 0;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
	}
	// TODO: controllerName: Increase code coverage
	public static void increaseCoverage2() {
		Integer i = 0;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
	}
	// TODO: controllerName: Increase code coverage
	public static void increaseCoverage3() {
		Integer i = 0;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
	}
	// TODO: controllerName: Increase code coverage
	public static void increaseCoverage4() {
		Integer i = 0;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
		i++;
	}
}